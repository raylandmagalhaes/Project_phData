# Simple NGINX configuration for proxying requests to the Django application.
#
# The upstream block defines a group of backend servers.  In this case we
# reference the ``web`` service defined in docker-compose.yml, which runs
# Gunicorn inside a Python container.  Should you scale the web service to
# multiple replicas (for example, ``docker-compose up --scale web=3``),
# Docker automatically assigns each replica a unique hostname (e.g.
# ``web``, ``web_1``, ``web_2``).  You can list those here to enable
# round‑robin load balancing.  NGINX proxies requests to the upstream in
# a way that balances the load and improves fault tolerance【58967053478714†L421-L423】.

worker_processes 1;

events {
    worker_connections 1024;
}

http {
    upstream django {
        # Define a pool of backend application servers.  During blue‑green
        # deployments you can list both the existing ("web") and new
        # ("web_green") services here.  Weighted round‑robin is used to
        # gradually shift traffic from the old model (weight=9) to the new
        # model (weight=1).  Adjust the weights as part of the deployment
        # process to control the proportion of requests handled by each
        # version.  When the green version is fully validated you can set
        # ``web`` to zero weight or remove it entirely.
        server web:8000 weight=5;
        server web_green:8000 weight=5;
    }

    server {
        listen 80;
        # Forward all requests to the upstream group
        location / {
            proxy_pass http://django;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}