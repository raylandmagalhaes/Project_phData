version: "3.8"

services:
  # The Django application served by Gunicorn.  The build context is the
  # current directory which includes the Dockerfile.  Gunicorn is run
  # directly rather than using the Django development server to provide a
  # production‑ready WSGI server.  The number of workers defaults to 3
  # and can be adjusted by setting the ``WEB_CONCURRENCY`` environment
  # variable at runtime【386915800441439†L1392-L1404】.
  web:
    build: .
    environment:
      # Override the model and demographic file locations if desired.  These
      # environment variables are consumed by predictor/views.py when
      # loading the model.  You can mount a new model under ./models/model
      # and update these paths without modifying the application code.
      MODEL_PATH: models/model/model.pkl
      MODEL_FEATURES_PATH: models/model/model_features.json
      DEMOGRAPHICS_PATH: data/zipcode_demographics.csv
      MODEL_VERSION: "1.0"
    # Mount the model and demographics into the container read‑only so
    # refreshing the files on the host updates the running container.
    volumes:
      - ./models/model:/app/models/model:ro
      - ./data/zipcode_demographics.csv:/app/data/zipcode_demographics.csv:ro
    expose:
      - "8000"
    # Optionally declare restart policy so the container restarts on failure
    restart: on-failure

  # NGINX serves as a reverse proxy and load balancer in front of the
  # Gunicorn application servers.  It listens on port 80 inside the
  # container and maps port 8000 on the host to port 80.  If you scale the
  # web service using ``docker-compose up --scale web=3`` NGINX will
  # automatically round‑robin requests across the replicas as defined in
  # nginx.conf【58967053478714†L421-L423】.
  nginx:
    image: nginx:latest
    ports:
      - "8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web